{"version":3,"sources":["logo.svg","firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","email","setEmail","password","setPassword","setUsername","setUser","onAuthStateChanged","authUser","console","log","id","post","Modal","onClose","style","logo","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d31573e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.568bad83.svg\";","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyCZWMttIQpQCi9kfcy-5CK962ZoJ3mG2yI\",\n  authDomain: \"instagram-clone-cf700.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-cf700.firebaseio.com\",\n  projectId: \"instagram-clone-cf700\",\n  storageBucket: \"instagram-clone-cf700.appspot.com\",\n  messagingSenderId: \"759477215097\",\n  appId: \"1:759477215097:web:f4fffa265e2ec2b52219a8\",\n  measurementId: \"G-6JWX9YDB6Z\"\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n","import React, { useState, useEffect } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from './firebase.js';\nimport firebase from \"firebase\";\n\nfunction Post({ postId, user, username, caption, imageUrl }) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState('');\n\n\n\n  useEffect(() => {\n    let unsubscribe;\n    if (postId) {\n      unsubscribe = db\n        .collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setComments(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n\n    return () => {\n      unsubscribe();\n    };\n  }, [postId]);\n\n  const postComment = (event) => {\n    event.preventDefault();\n\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment('');\n  }\n\n  return (\n    <div className=\"post\">\n      <div className=\"post__header\">\n        <Avatar\n          className=\"post__avatar\"\n          alt={username}\n          src=\"/static/images/avatar/1.jpg\"\n        />\n        <h3>{username}</h3>\n      </div>\n\n      <img className=\"post__image\" src={imageUrl} alt=\"\" />\n\n      <h4 className=\"post__text\">\n        <strong>{username}</strong> {caption}\n      </h4>\n\n      <div className=\"post__comments\">\n        {comments.map((comment) => (\n          <p>\n            <strong>{comment.username}</strong> {comment.text}\n          </p>\n        ))}\n      </div>\n\n\n      {user && (\n        <form className=\"post__commentBox\">\n          <input\n            className=\"post__input\"\n            type=\"text\"\n            placeholder=\"Add a comment...\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n          <button\n            className=\"post__button\"\n            disabled={!comment}\n            type=\"submit\"\n            onClick={postComment}\n          >Post</button>\n        </form>\n      )}\n\n\n\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport firebase from \"firebase\";\nimport { storage, db } from './firebase.js';\nimport './ImageUpload.css';\n\nfunction ImageUpload({ username }) {\n    const [image, setImage] = useState(null);\n    const [progress, setProgress] = useState(0);\n    const [caption, setCaption] = useState('');\n\n    const handleChange = (e) => {\n        if (e.target.files[0]) {\n            setImage(e.target.files[0]);\n        }\n    };\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n        uploadTask.on(\n            \"state_changed\",\n            (snapshot) => {\n                // Progress function\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n\n            },\n            (error) => {\n                // Error function\n                alert(error.message);\n            },\n            () => {\n                // Complete function\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        // Post image in db\n                        db.collection(\"posts\").add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n                        setProgress(0);\n                        setCaption(\"\");\n                        setImage(null);\n                    });\n            }\n        );\n    };\n\n    return (\n        <div className=\"imageupload\">\n            <div className=\"imageupload__container\">\n                <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\n                <input className=\"imageupload__upload\" type=\"file\" onChange={handleChange} />\n                <input className=\"imageupload__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={event => setCaption(event.target.value)} value={caption} />\n                <Button className=\"imageupload__submit\" onClick={handleUpload}>\n                    Upload\n            </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageUpload\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\nimport Post from \"./Post\";\nimport { db, auth } from \"./firebase\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from \"./ImageUpload.js\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // User has logged in...\n        console.log(authUser);\n        setUser(authUser);\n\n      } else {\n        // User has logged out...\n        setUser(null);\n      }\n    })\n\n    return () => {\n      // Perform some cleanup actions\n      unsubscribe();\n    }\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\").orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })));\n    })\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  }\n\n  const signIn = (event) => {\n    event.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message))\n\n    setOpenSignIn(false);\n  }\n\n  return (\n    <div className=\"app\">\n\n\n      {user ? (\n        <ImageUpload username={user.displayName} />\n      ) : (\n          <h3 className=\"app__signInMessage\">Please login to post photos</h3>\n        )}\n\n\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signUp\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n\n            <Input\n              placeholder=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal\n        open={openSignIn}\n        onClose={() => setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signUp\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <Button type=\"submit\" onClick={signIn}>Login</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <div className=\"app__headerContainer\">\n          <img\n            className=\"app__headerImage\"\n            src={logo}\n            alt=\"\"\n          />\n\n\n          {user ? (\n            <Button onClick={() => auth.signOut()}>Logout</Button>\n          ) : (\n              <div className=\"app__loginContainer\">\n                <Button onClick={() => setOpenSignIn(true)}>Login</Button>\n                <Button onClick={() => setOpen(true)}>Sign Up</Button>\n              </div>\n            )}\n\n        </div>\n      </div>\n\n\n      {\n        posts.map(({ id, post }) => (\n          <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}